# RHEA's CONFIGURATION FILE (YAML LANGUAGE)
#
# 2D differentially-heated cavity: (Le Quéré et al. 2005)  
---

##### FLUID & FLOW PROPERTIES #####
fluid_flow_properties:
   # Thermodynamic models: IDEAL_GAS (provide R_specific, gamma), STIFFENED_GAS (provide R_specific, gamma, P_inf, e_0, c_v),
   # PENG_ROBINSON (provide R_specific, molecular_weight, acentric_factor, critical temperature, critical pressure, critical molar volume, NASA 7-coefficient polynomial)
   thermodynamic_model: 'IDEAL_GAS'			  		# Thermodynamic model
   R_specific: 287.0                 					# Specific gas constant [J/(kg·K)]
   gamma: 1.4                          					# Heat capacity ratio (ideal-gas) [-]
   #P_inf: 0.0                         					# Pressure infinity (liquid stiffness) [Pa]
   #e_0: 0.0                         					# Internal energy zero point [J/kg]
   #c_v: 0.0                         					# Specific isochoric heat capacity [J/(kg·K)]
   #molecular_weight: 0.0               				# Molecular weight [kg/mol]
   #acentric_factor: 0.0               					# Acentric factor [-]
   #critical_temperature: 0.0           				# Critical temperature [K]
   #critical_pressure: 0.0           					# Critical pressure [Pa]
   #critical_molar_volume: 0.0          				# Critical molar volume [m3/mol]
   #NASA_coefficients: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]	# NASA 7-coefficient polynomial (15 values)
   # Transport coefficients models: CONSTANT (provide mu, kappa),
   # LOW_PRESSURE_GAS (provide reference dynamic viscosity, reference thermal conductivity, reference temperature, Sutherland's dynamic viscosity constant, Sutherland's thermal conductivity constant),
   # HIGH_PRESSURE (provide molecular weight, critical temperature, critical molar volume, acentric factor, dipole moment, association factor, NASA 7-coefficient polynomial)
   transport_coefficients_model: 'CONSTANT'	  			# Transport coefficients model
   mu: 0.0                          					# Dynamic viscosity [Pa·s] ... overwritten in myRHEA.cpp
   kappa: 0.0                          					# Thermal conductivity [W/(m·K)] ... overwritten in myRHEA.cpp
   #mu_0: 0.0								# Reference dynamic viscosity [Pa·s]	
   #kappa_0: 0.0							# Reference thermal conductivity [W/(m·K)]	
   #T_0: 0.0								# Reference temperature [K]	
   #S_mu: 0.0								# Sutherland's dynamic viscosity constant [K]	
   #S_kappa: 0.0							# Sutherland's thermal conductivity constant [K]	
   #dipole_moment: 0.0               					# Dipole moment [D]
   #association_factor: 0.0             				# Association factor [-]
   # Substances: CARBON_DIOXIDE, DODECANE, HFC-134a, HYDROGEN, METHANE, NITROGEN, OXYGEN, WATER
   # Optional. Define substance to read from library file: R_specific, gamma, P_inf, e_0, c_v, molecular_weight, acentric_factor, critical_temperature, critical_pressure, critical_molar_volume, NASA_coefficients, dipole_moment, association_factor
   #substance_name: 'NITROGEN'         					# Substance [-]
   #substances_library_file: './substances_library_file.yaml'   	# Substances library file [-]


##### PROBLEM PARAMETERS #####
problem_parameters:
   x_0: 0.0                           					# Domain origin in x-direction [m]
   y_0: 0.0                            					# Domain origin in y-direction [m]
   z_0: 0.0                           					# Domain origin in z-direction [m]
   L_x: 1.0                      					# Size of domain in x-direction [m]
   L_y: 1.0                           					# Size of domain in y-direction [m]
   L_z: 0.01	                    					# Size of domain in z-direction [m]
   final_time: 1.0e06                  					# Final time [s]


##### COMPUTATIONAL PARAMETERS #####
computational_parameters:
   num_grid_x: 160                    				        # Number of internal grid points in the x-direction
   num_grid_y: 160                      				# Number of internal grid points in the y-direction
   num_grid_z: 1                     					# Number of internal grid points in the z-direction
   # Stretching factors: x = x_0 + L*eta + A*( 0.5*L - L*eta )*( 1.0 - eta )*eta, with eta = ( l - 0.5 )/num_grid 
   # A < 0: stretching at ends; A = 0: uniform; A > 0: stretching at center
   A_x: 0.0                 					        # Stretching factor in x-direction
   A_y: 0.0              					        # Stretching factor in y-direction
   A_z: 0.0                       					# Stretching factor in z-direction
   CFL: 0.3                  					        # CFL coefficient
   # Riemann solver scheme: DIVERGENCE, MURMAN-ROE, KGP, SHIMA, HLL, HLLC, HLLC+
   riemann_solver_scheme: 'KGP'		        	  		# Riemann solver scheme
   # Runge-Kutta time scheme: RK1, SSP-RK2, SSP-RK3
   runge_kutta_time_scheme: 'SSP-RK3'		          		# Runge-Kutta time scheme  
   # Transport P instead of rhoE scheme: FALSE, TRUE
   transport_pressure_scheme: 'FALSE'  		          		# Transport P instead of rhoE scheme 
   # Artificially decrease the velocity of acoustic waves: FALSE, TRUE
   artificial_compressibility_method: 'FALSE'  	          		# Artificially decrease velocity of acoustic waves
   epsilon_acm: 0.01                                                    # Relative error of artificial compressibility method
   final_time_iter: 10000000           					# Final time iteration


##### BOUNDARY CONDITIONS #####
boundary_conditions:
   # For each boundary [west (x), east (x), south (y), north (y), back (z), front (z)], type and u, v, w, P and T values/derivatives are needed
   # Boundary types: DIRICHLET (provide value ... P < 0 and/or T < 0 for impermeable boundary),
   #                 NEUMANN (provide derivative),
   #                 PERIODIC (no value/derivative needed)
   #                 SUBSONIC_INFLOW (provide u, v, w, T)
   #                 SUBSONIC_OUTFLOW (provide P_inf)
   #                 SUPERSONIC_INFLOW (provide u, v, w, P, T)
   #                 SUPERSONIC_OUTFLOW (no value/derivative needed)
   west_bc: ['DIRICHLET', 0.0, 0.0, 0.0, -1.0, 960.0]                   # West boundary condition
   east_bc: ['DIRICHLET', 0.0, 0.0, 0.0, -1.0, 240.0]                   # East boundary condition
   south_bc: ['DIRICHLET', 0.0, 0.0, 0.0, -1.0, -1.0]                   # South boundary condition
   north_bc: ['DIRICHLET', 0.0, 0.0, 0.0, -1.0, -1.0]                   # North boundary condition
   back_bc: ['NEUMANN', 0.0, 0.0, 0.0, 0.0, 0.0]                        # Back boundary condition
   front_bc: ['NEUMANN', 0.0, 0.0, 0.0, 0.0, 0.0]                       # Front boundary condition

##### PRINT/WRITE/READ PARAMETERS #####
print_write_read_parameters:
   print_frequency_iter: 1000 	             				# Print information iteration frequency
   output_data_file_name: '2D_differentially_heated_cavity'     	# Name of output data file
   output_frequency_iter: 10000        					# Data output iteration frequency
   generate_xdmf: 'TRUE'               					# Generate xdmf file reader
   use_restart: 'FALSE'                					# Use restart to initialize problem
   restart_data_file: 'restart_data_file.h5' 				# Restart data file
   time_averaging_active: 'FALSE'          				# Activate time averaging
   reset_time_averaging: 'FALSE'          				# Reset time averaging


##### TIMERS INFORMATION #####
timers_information:
   print_timers: 'TRUE'               					# Print timers information
   timers_information_file: 'timers_information_file.txt'		# Timers information file


##### PARALLELIZATION SCHEME #####
parallelization_scheme:
   np_x: 2                             					# Number of processes in x-direction
   np_y: 2                             					# Number of processes in y-direction
   np_z: 1                             					# Number of processes in z-direction
